# This file combines the ServiceAccount, Role, RoleBinding, and Deployment
# from the example in Chapter 14 for easier application.

# 1. Create a ServiceAccount for the application Pod
apiVersion: v1
kind: ServiceAccount
metadata:
  name: myapp-sa
  namespace: production # Assuming deployment in 'production' namespace

---
# 2. Define a Role granting permissions needed by the app (e.g., list endpoints)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: production
  name: endpoint-lister
rules:
- apiGroups: [""]
  resources: ["endpoints", "services"]
  verbs: ["get", "list", "watch"]

---
# 3. Bind the ServiceAccount to the Role
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: myapp-lister-binding
  namespace: production
subjects:
- kind: ServiceAccount
  name: myapp-sa # Name of the ServiceAccount
  namespace: production
roleRef:
  kind: Role
  name: endpoint-lister
  apiGroup: rbac.authorization.k8s.io

---
# 4. Configure the Pod to use the ServiceAccount
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deployment
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      serviceAccountName: myapp-sa # Assign the ServiceAccount to the Pod
      containers:
      - name: myapp-container
        image: nginx:latest # Replace with your actual app image
        ports:
        - containerPort: 80
        # ... other container config ...
